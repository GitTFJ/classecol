devtools::document()
bio_mod_pers = read.csv("data-raw/bio_mod_pers.rds")
mod = read.csv("data-raw/mod.rds")
mop = read.csv("data-raw/mop.rds")
classifier = function(text, tag, sentiment = NULL){
#Load packages
library(RTextTools)
library(tm)
require(nnet)
#Create dtm
matrix = create_matrix(text, language="english", removeNumbers=TRUE, weighting=tm::weightTfIdf)
#Remove sparse terms
matrix = removeSparseTerms(matrix, .99)
#Specify size of the training data
size = as.integer(0.85*length(text))
#Place data into model-friendly structure
container = create_container(matrix, tag, trainSize = c(1:size), testSize = c((size + 1):length(text)), virgin=TRUE)
#Run classifier
if(length(unique(tag)) > 2){
models = train_models(container, algorithms=c("SVM","SLDA","BOOSTING","BAGGING","RF","GLMNET","TREE", "NNET"))
} else {
models = train_models(container, algorithms=c("SVM","SLDA","BOOSTING","BAGGING","RF","GLMNET","TREE"))
}
#Predict outputs
results = classify_models(container, models)
#Add trues
results$test = tag[((size + 1):length(text))]
results$test = as.factor(results$test)
#Train the ensemble
if(is.null(sentiment)){
ensemble = multinom(test ~ ., data = results[,c(TRUE,FALSE)])
} else {
ensemble = multinom(test ~ ., data =
cbind(results[,c(TRUE,FALSE)], sentiment[c((size + 1):length(text)),]))
}
models = list(models, ensemble)
return(models)
}
#Nature ---
bio = read.csv("../background/bio.csv", stringsAsFactors=FALSE, fileEncoding="latin1")
getwd()
#Nature ---
bio = read.csv("../../background/bio.csv", stringsAsFactors=FALSE, fileEncoding="latin1")
##Person
bio$tags2 = bio$tags
bio$tags2 = gsub("Expert", "Other", bio$tags2)
bio$tags2 = gsub("Wildlife org", "Other", bio$tags2)
bio$tags2 = gsub("Organisation/Group/Company/Other", "Other", bio$tags2)
bio_mod_pers = classifier(bio$text, bio$tags2)
saveRDS(bio_mod_pers, "bio_mod_pers.rds")
bio_mod_pers = read.csv("data-raw/bio_mod_pers.rds")
bio$tags2
bio$text
text = bio$text
tag = bio$tags2
#Load packages
library(RTextTools)
library(tm)
require(nnet)
#Create dtm
matrix = create_matrix(text, language="english", removeNumbers=TRUE, weighting=tm::weightTfIdf)
#Remove sparse terms
matrix = removeSparseTerms(matrix, .99)
#Create dtm
matrix = create_matrix(text, language="english", removeNumbers=TRUE, weighting=tm::weightTfIdf)
colTotals <- apply(matrix , 2, sum)
rowTotals <- apply(matrix , 1, sum)
View(bio)
#Nature ---
bio = read.csv("../../background/bio.csv", stringsAsFactors=FALSE, fileEncoding="latin1")
##Person
bio$tags2 = bio$tags
bio$tags2 = gsub("Expert", "Other", bio$tags2)
bio$tags2 = gsub("Wildlife org", "Other", bio$tags2)
bio$tags2 = gsub("Organisation/Group/Company/Other", "Other", bio$tags2)
bio_mod_pers = classifier(bio$text, bio$tags2)
saveRDS(bio_mod_pers, "bio_mod_pers.rds")
bio_mod_pers = read.csv("data-raw/bio_mod_pers.rds")
View(bio_mod_pers)
#Nature ---
bio = read.csv("../../background/bio.csv", stringsAsFactors=FALSE, fileEncoding="latin1")
##Person
bio$tags2 = bio$tags
bio$tags2 = gsub("Expert", "Other", bio$tags2)
bio$tags2 = gsub("Wildlife org", "Other", bio$tags2)
bio$tags2 = gsub("Organisation/Group/Company/Other", "Other", bio$tags2)
View(bio)
bio$char = nchar(bio$text)
bio_mod_pers = classifier(bio$text, bio$tags2)
View(bio_mod_pers)
saveRDS(bio_mod_pers, "bio_mod_pers.rds")
tmp = readRDS("bio_mod_pers.rds")
bio_mod_pers = readRDS("data-raw/bio_mod_pers.rds")
devtools::document()
bio_mod_pers = readRDS("data-raw/bio_mod_pers.rds")
usethis::use_data(bio_mod_pers, overwrite = T)
devtools::document()
